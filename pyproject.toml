[project]
name = "private-gpt"
version = "0.6.2"
description = "Private GPT"
authors = [{ name = "Zylon", email = "hi@zylon.ai" }]
requires-python = ">=3.11,<3.12"
dependencies = [
    "fastapi[all]>=0.115.0,<0.116",
    "python-multipart>=0.0.10,<0.0.11",
    "injector>=0.22.0,<0.23",
    "pyyaml>=6.0.2,<7",
    "watchdog>=4.0.1,<5",
    "transformers>=4.44.2,<5",
    "docx2txt>=0.8,<0.9",
    "cryptography~=3.1",
    "llama-index-core>=0.11.2,<0.12.0",
    "llama-index-readers-file",
    "clickhouse-connect>=0.7.19,<0.8",
    "retry-async>=0.1.4,<0.2",
]

[project.optional-dependencies]
ui = [
    "gradio>=4.44.0,<5",
    "ffmpy>=0.4.0,<0.5",
]
llms-llama-cpp = ["llama-index-llms-llama-cpp"]
llms-openai = ["llama-index-llms-openai"]
llms-openai-like = ["llama-index-llms-openai-like"]
llms-ollama = ["llama-index-llms-ollama"]
llms-sagemaker = ["boto3>=1.35.26,<2"]
llms-azopenai = ["llama-index-llms-azure-openai"]
llms-gemini = ["llama-index-llms-gemini"]
embeddings-ollama = ["llama-index-embeddings-ollama"]
embeddings-huggingface = [
    "llama-index-embeddings-huggingface",
    "einops>=0.8.0,<0.9",
]
embeddings-openai = ["llama-index-embeddings-openai"]
embeddings-sagemaker = ["boto3>=1.35.26,<2"]
embeddings-azopenai = ["llama-index-embeddings-azure-openai"]
embeddings-gemini = ["llama-index-embeddings-gemini"]
embeddings-mistral = ["llama-index-embeddings-mistralai"]
vector-stores-qdrant = ["llama-index-vector-stores-qdrant"]
vector-stores-clickhouse = ["llama-index-vector-stores-clickhouse"]
vector-stores-chroma = ["llama-index-vector-stores-chroma"]
vector-stores-postgres = ["llama-index-vector-stores-postgres"]
vector-stores-milvus = ["llama-index-vector-stores-milvus"]
storage-nodestore-postgres = [
    "llama-index-storage-docstore-postgres",
    "llama-index-storage-index-store-postgres",
    "psycopg2-binary>=2.9.9,<3",
    "asyncpg>=0.29.0,<0.30",
]
rerank-sentence-transformers = [
    "torch>=2.4.1,<3",
    "sentence-transformers>=3.1.1,<4",
]

[dependency-groups]
dev = [
    "black>=24,<25",
    "mypy~=1.11",
    "pre-commit>=3,<4",
    "pytest>=8,<9",
    "pytest-cov>=5,<6",
    "ruff>=0,<1",
    "pytest-asyncio>=0.24.0,<0.25",
    "types-pyyaml>=6.0.12.20240917,<7",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.coverage.run]
branch = true

[tool.coverage.report]
skip_empty = true
precision = 2

[tool.black]
target-version = ['py311']

[tool.ruff]
target-version = 'py311'

# See all rules at https://beta.ruff.rs/docs/rules/
lint.select = [
    "E", # pycodestyle
    "W", # pycodestyle
    "F", # Pyflakes
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "D", # pydocstyle
    "I", # isort
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q", # flake8-quotes
    "UP", # pyupgrade
    "PT", # flake8-pytest-style
    "RUF", # Ruff-specific rules
]

lint.ignore = [
    "E501", # "Line too long"
    # -> line length already regulated by black
    "PT011", # "pytest.raises() should specify expected exception"
    # -> would imply to update tests every time you update exception message
    "SIM102", # "Use a single `if` statement instead of nested `if` statements"
    # -> too restrictive,
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107"
    # -> "Missing docstring in public function too restrictive"
]

[tool.ruff.lint.pydocstyle]
# Automatically disable rules that are incompatible with Google docstring convention
convention = "google"

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
strict = true
runtime-evaluated-base-classes = ["pydantic.BaseModel"]

[tool.ruff.lint.per-file-ignores]
# Allow missing docstrings for tests
"tests/**/*.py" = ["D1"]

[tool.mypy]
python_version = "3.11"
strict = true
check_untyped_defs = false
explicit_package_bases = true
warn_unused_ignores = false
exclude = ["tests"]

[tool.mypy-llama-index]
ignore_missing_imports = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
addopts = [
    "--import-mode=importlib",
]
